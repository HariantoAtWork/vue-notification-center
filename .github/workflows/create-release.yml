name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get previous tag
        id: get_previous_tag
        run: |
          # Get the current tag
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag exists, use the first commit
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            echo "No previous tag found, using first commit: $PREVIOUS_TAG"
          else
            echo "Previous tag found: $PREVIOUS_TAG"
          fi
          
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Generate changelog
        id: generate_changelog
        run: |
          # Get commit messages between the previous tag and the current tag
          if [[ "$PREVIOUS_TAG" =~ ^[0-9a-f]{40}$ ]]; then
            # If PREVIOUS_TAG is a commit hash
            COMMITS=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG)
          else
            # If PREVIOUS_TAG is a tag
            COMMITS=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG)
          fi
          
          # Group commits by type (feat, fix, etc.)
          FEATURES=$(echo "$COMMITS" | grep -i "^\- feat" || echo "")
          FIXES=$(echo "$COMMITS" | grep -i "^\- fix" || echo "")
          DOCS=$(echo "$COMMITS" | grep -i "^\- docs" || echo "")
          STYLE=$(echo "$COMMITS" | grep -i "^\- style" || echo "")
          REFACTOR=$(echo "$COMMITS" | grep -i "^\- refactor" || echo "")
          PERF=$(echo "$COMMITS" | grep -i "^\- perf" || echo "")
          TEST=$(echo "$COMMITS" | grep -i "^\- test" || echo "")
          BUILD=$(echo "$COMMITS" | grep -i "^\- build" || echo "")
          CI=$(echo "$COMMITS" | grep -i "^\- ci" || echo "")
          OTHER=$(echo "$COMMITS" | grep -v -i "^\- \(feat\|fix\|docs\|style\|refactor\|perf\|test\|build\|ci\)" || echo "")
          
          # Create the changelog
          CHANGELOG="## What's Changed\n\n"
          
          if [ ! -z "$FEATURES" ]; then
            CHANGELOG+="### Features\n$FEATURES\n\n"
          fi
          
          if [ ! -z "$FIXES" ]; then
            CHANGELOG+="### Bug Fixes\n$FIXES\n\n"
          fi
          
          if [ ! -z "$DOCS" ]; then
            CHANGELOG+="### Documentation\n$DOCS\n\n"
          fi
          
          if [ ! -z "$STYLE" ]; then
            CHANGELOG+="### Styles\n$STYLE\n\n"
          fi
          
          if [ ! -z "$REFACTOR" ]; then
            CHANGELOG+="### Code Refactoring\n$REFACTOR\n\n"
          fi
          
          if [ ! -z "$PERF" ]; then
            CHANGELOG+="### Performance Improvements\n$PERF\n\n"
          fi
          
          if [ ! -z "$TEST" ]; then
            CHANGELOG+="### Tests\n$TEST\n\n"
          fi
          
          if [ ! -z "$BUILD" ]; then
            CHANGELOG+="### Build System\n$BUILD\n\n"
          fi
          
          if [ ! -z "$CI" ]; then
            CHANGELOG+="### CI/CD\n$CI\n\n"
          fi
          
          if [ ! -z "$OTHER" ]; then
            CHANGELOG+="### Other Changes\n$OTHER\n\n"
          fi
          
          # Add contributors section
          CONTRIBUTORS=$(git log --pretty=format:"@%an" $PREVIOUS_TAG..$CURRENT_TAG | sort -u | sed 's/@//g' | sed ':a;N;$!ba;s/\n/, /g')
          CHANGELOG+="## Contributors\n\n$CONTRIBUTORS\n\n"
          
          # Add the changelog to the environment
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Also save it to a file for the release
          echo "$CHANGELOG" > changelog.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.CURRENT_TAG }}
          body_path: changelog.md
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 